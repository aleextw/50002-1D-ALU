module seq_plus_varySlow (
	input clk,  // clock
	input rst,  // reset
	output out[8]
  ) 

{
  const SLOWCLOCK_SIZE = 27;
  
  dff register_1[8](#INIT(0), .clk(clk), .rst(rst));
  fsm y_controller(.clk(clk), .rst(rst)) = {S0, S1, S2};
  eight_bit_adder adder;
  counter slowClock(#SIZE(SLOWCLOCK_SIZE), .clk(clk), .rst(rst));
  edge_detector slowClockEdge(#RISE(1), #FALL(0), .clk(clk));
 
  always {
	adder.y = 8h00;
	adder.x = register_1.q;
	adder.cin = b0;

  slowClockEdge.in = slowClock.value[SLOWCLOCK_SIZE-1];

	
	case (y_controller.q){
  	y_controller.S0:
      	adder.y = 8h02;
       if (slowClockEdge.out == b1){ //only trigger change when slowClockEdge gives a 1
      	    y_controller.d = y_controller.S1;
        }
  	y_controller.S1:
      	adder.y = 8h07;
       if (slowClockEdge.out == b1){
      	y_controller.d = y_controller.S2;
        }
  	y_controller.S2:
      	adder.y = 8h0C;
       if (slowClockEdge.out == b1){
      	y_controller.d = y_controller.S0;
      	}
    }

    if (slowClockEdge.out == b1){
	          register_1.d = adder.s;
        }
    	out = adder.s;
	
  }
}


