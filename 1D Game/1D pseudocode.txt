Allocation of registers in the regfile
R0 - R22: General Purpose Registers
R23: Currently Selected Peg
R24: Pegs
R25: Possible Moves
R26: Level Counter
R27: Base Pointer
R28: Linkage Pointer
R29: Stack Pointer
R30: Exception Pointer
R31: Zero Register

init:
ST(R31, buttons) || Write 0 into the memory location for buttons
SVC()            || Wait for user to press a button
LD(buttons, R0)  || Load our button values from RAM and store to R0.
ST(R31, buttons) || Clear the buttons

|| To check which if the start button is pressed
SHRC(R0, 4, R0)   || Shift R0 right by 4 bits to get MSB of 5-bit value
BF(R0, init, R31) || If MSB == 1, means we pressed the start button, continue, else branch back to start and wait for button input
CMOVE(1, R26)     || Add 1 to our level count R26

start:
|| If R26 == 1, branch to level_one_setup
CMPEQC(R26,1,R0) || if R26 == 1, then R0 is 1, else R0 is 0
BT(R0, level_one_setup, R31) 
|| elif R26 == 2, branch to level_two_setup
CMPEQC(R26,2,R0)
BT(R0, level_two_setup, R31)
|| elif R26 == 3, branch to level_three_setup
CMPEQC(R26,3,R0)
BT(R0, level_three_setup, R31)

|| else endgame
CMOVE(1111111111111111, R24) || Why is it in binary? Should it be 65535?
light_loop:                  || To turn off one light at a time until all the light is off
SHRC(R24, 1, R24)            || Remove the LSB and add 0 to the front
BT(R24, light_loop, R24)     || If any bit is 1, continue looping. Else go back to the initial. What is the delay between the loop though?
BF(init)



level_one_setup:
LD(R26, level_one_position, R24) || Load level one peg positions to R24. Do we need R26 since we have the right label already?
BF(R31, array_setup, R31)        || Branch to array_setup

level_two_setup:
LD(R26, level_two_position, R24) || Load level two  peg positions to R24.
BF(R31, array_setup, R31)        || Branch to array_setup

level_three_setup: 
RAND(R0)                  || Store random value to R0
XORC(R0, 65536, R24)      || Make on of the bit from 1 to 0 in 65535. Should the number be 65535 instead for 0b1111111111111111? 
BF(R31, array_setup, R31) || Branch to array_setup

array_setup: 
MOVE(R31, R1) || Set R1 to 0 to use as our counter
CMOVE(1, R0)  || Set R0 to 1 to use as our mask

array_setup_loop: 
SHR(R24, R1, R2)              || to get the i-th peg as the LSB
AND(R2, R0, R3)               || returns 1 if a peg is at the i-th position, and 0 if there is no peg
SHLC(R1, 1, R4)               || gives us the array index, accounting for the 2-byte indexing of our data memory
ST(R4, pegboard_array, R3)    || stores our result of whether there is a peg in the i-th position in our data memory
ADDC(R1, 1, R1)               || Add 1 to the counter
|| If R1 == 15, we have written our entire pegboard to our array, continue with game
CMPEQC(R1,15,R5)              || if R1 == 15, then R5 is 1, else R5 is 0
BF(R5, array_setup_loop, R31) || Else, branch back to array_setup

game_start:
a_input:
ST(R31, buttons)|| Store 0 into the buttons
SVC()           || Check for user button pressed
LD(buttons, R0) || Load our button values from RAM and store to R0
ST(R31, buttons)|| Clear the buttons back to all 0

MOVE(R31, R23) || Set our 'currently selected peg' register to be 0
MOVE(R31, R25) || Set our 'possible moves' register to be 0

|| R0 has the value of the button pressed
SHRC(R0, 4, R0) || Shift R0 right by 4 bits to get MSB of 5-bit value
BT(R0, start, R31) || If MSB == 1, means we pressed the start button, continue, else branch back to start and wait for button input

SUBC(R0, 1, R1)       || R1 will be -1, am I right? Since MSB == 0 and R0 stores the MSB only.
SHR(R24, R1, R2)      || Shift right by ID - 1 bits, then AND the result with 1 and store to R2
ANDC(R2, 1, R2)
BEQ(R2, a_input, R31) || If R2 == 0, there is no peg, so branch to a_input to await new button press

|| R0 contains the peg we are checking now
|| R1 contains peg - 1
MOVE(R31, R2) || Initialize a register R2 to be used as a counter that counts from 0 to 4 (4 corresponds to the max number of moves from a peg position).
MOVE(R31, R3) || Set R3 to be 0. This will be used to store our potential jump destinations
check_a_position:
LD(R1, jump_array, R4)  || contains our constraints, stored as {space, peg}
SHRC(R4, 8, R5)     || R5 stores space position
SHLC(R5, 1, R7)     || R7 stores array index of space position
SHLC(R4, 8, R6)
SHRC(R6, 8, R6)     || R6 stores peg position
SHLC(R6, 1, R8)     || R8 stores array index of peg position

LD(R7, pegboard_array, R7)  || Get status of peg at space position
LD(R8, pegboard_array, R8)  || Get status of peg at peg position
CMPLE(R8, R7, R7)
BF(R7, add_position, R31)

ADDC(R2, 1, R2)
ADDC(R1, 2, R1)
CMPEQC(R2, 4, R8)
BF(R8, check_a_position, R31)
BT(R8, any_position_exist_check, R31)

add_position:
SUBC(R5, 1, R5)
CMOVE(1, R6)
SHL(R6, R5, R6)
OR(R6, R3, R3)

ADDC(R2, 1, R2)
ADDC(R1, 2, R1)
CMPEQC(R2, 4, R8)
BF(R8, check_a_position, R31)

any_position_exist_check:
BF(R3, a_input, R31)    || Invalid selectoin; branch back to a_input
MOVE(R3, R25)           || Store possible moves
MOVE(R0, R23)           || Store current button press


b_input:
ST(R31, buttons)
SVC()
LD(buttons, R0) || Load our button values from RAM and store to R0
ST(R31, buttons)

SHRC(R0, 4, R0) || Shift R0 right by 4 bits to get MSB of 5-bit value
BT(R0, start, R31) || If MSB == 1, means we pressed the start button, continue, else branch back to start and wait for button input

CMPEQ(R0, R23, R1)  || Check whether b_input == a_input
BT(R1, a_input, R31)

SUBC(R0, 1, R1)
CMOVE(1, R2)
SHL(R2, R1, R2)         || Create our b_input bitmask
AND(R25, R2, R2)
BF(R2, b_input, R31)   

peg_search:
LD(R1, jump_array, R2)  || contains our constraints, stored as {space, peg}
SHRC(R2, 8, R3)     || R5 stores space position
SHLC(R2, 8, R4)
SHRC(R4, 8, R4)     || R6 stores peg position
CMPEQ(R3, R0, R5)   || If our b_input == R5, then we have found our space position and peg position
ADDC(R1, 2, R1)     || Go to next index
BF(R5, peg_search, R31)

|| At this point, R0 contains our b_input, R5 contains our space position, R6 contains our peg position
|| Toggle all lights
SUBC(R0, 1, R1)
CMOVE(1, R2)
SHL(R2, R1, R2)
XOR(R24, R2, R24)

SUBC(R5, 1, R1)
CMOVE(1, R2)
SHL(R2, R1, R2)
XOR(R24, R2, R24)

SUBC(R5, 1, R1)
CMOVE(1, R2)
SHL(R2, R1, R2)
XOR(R24, R2, R24)

PUSH(R31)    
PUSH(24)
BEQ(R31, count_pegs, LP)
DEALLOCATE(2)

CMPEQC(R0, 1, R0)
BF(R0, game_start, R31)

level_end:
ADDC(R26, 1, R26)   || Increment level counter by 1
MOVE(R31, R23) || Set our 'currently selected peg' register to be 0
MOVE(R31, R25) || Set our 'possible moves' register to be 0
CMOVE(1111111111111111, R24)
light_loop:
SHRC(R24, 1, R24)
BT(R24, light_loop, R24)
BF(start)




count_pegs:
|| callee entry procedure
PUSH(LP)
PUSH(BP)
MOVE(SP, BP)

|| preserve old registers before using them
PUSH(R1)
PUSH(R2)
PUSH(R3)
PUSH(R4)

|| function body
LD(BP, -12, R1)  		 			  || Load argument 1 (peg positions)
LD(BP, -16, R2)    					  || Load argument 2 (count)
ADDC(R31, 1, R3)        		  || Set content of R3 to our bitmask
AND(R1, R3, R4)        			  || Mask off LSB to R4
BEQ(R4, count_pegs_skip, R31)    || If R4 == 0, dont increment by 1
ADDC(R2, 1, R0)         		  || Increment peg count by 1

count_pegs_skip:
|| Recursive caller
PUSH(R0)                       || Number of pegs variable
PUSH(R1)                       || Peg positions
BNE(R1, count_pegs, LP)       || Call our function if we still have pegs
DEALLOCATE(2)

|| Callee exit sequence
POP(R4)
POP(R3)
POP(R2)
POP(R1)

MOVE(SP, BP)
POP(BP)
POP(LP)
BEQ(R31, LP, R31)


jump_array:
0000010000000010
0000011000000011
0000011100000100
0000100100000101
0000100000000101
0000101000000110
0000000100000010
0000011000000101
0000101100000111
0000110100001000
0000110000001000
0000111000001001
0000000100000011
0000010000000101
0000110100001001
0000111100001010
0000001000000100
0000100100001000
0000001100000101
0000101000001001
0000001000000101
0000011100001000
0000001100000110
0000100000001001
0000010000000111
0000110100001100
0000010100001000
0000111000001101
0000010000001000
0000011000001001
0000101100001100
0000111100001110
0000010100001001
0000110000001101
0000011000001010
0000110100001110



