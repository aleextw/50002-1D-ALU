module matrix_ram #(
  // 32 by 64 LED matrix by default, separated into top-16 rows and bottom 16-rows
  // both halves row i are written together for all rows 0 to 15 in a rapid loop 
  ADDRESS_SIZE = 4 : ADDRESS_SIZE > 0, //width of the address field (ABCD signals for matrix_led) 
  MATRIX_WIDTH = 64 : MATRIX_WIDTH > 0 //number of LEDs per row in the matrix
  )(
    input clk,  // clock
    input rst,
    
    input row_address[ADDRESS_SIZE],
    input col_address[$clog2(MATRIX_WIDTH)],
    
    input row_address_top[ADDRESS_SIZE],
    input col_address_top[$clog2(MATRIX_WIDTH)],
    input we_top,
    input wd_top[3],
    
    input row_address_btm[ADDRESS_SIZE],
    input col_address_btm[$clog2(MATRIX_WIDTH)],
    input we_btm,
    input wd_btm[3],
    
    input ready,
    output top_out[3], // bgr
    output bottom_out[3] // bgr
  ) {

  
    simple_dual_ram top_ram(#SIZE(3), #DEPTH(MATRIX_WIDTH*$pow(ADDRESS_SIZE, 2)), .rclk(clk), .wclk(clk));
    simple_dual_ram bottom_ram(#SIZE(3), #DEPTH(MATRIX_WIDTH*$pow(ADDRESS_SIZE, 2)), .rclk(clk),  .wclk(clk));
 
  always {
  
      top_ram.raddr = 0;
      top_ram.waddr = row_address_top * MATRIX_WIDTH + col_address_top;
      top_ram.write_data = wd_top;
      top_ram.write_en = we_top;
      
      bottom_ram.raddr = 0;
      bottom_ram.waddr = row_address_btm * MATRIX_WIDTH + col_address_btm;
      bottom_ram.write_data = wd_btm;
      bottom_ram.write_en = we_btm; 
    
      top_out = 0;
      bottom_out = 0;
    
      if (ready){
        top_ram.raddr = row_address * MATRIX_WIDTH + col_address; // should offset by 2 clock cycles than what's required by matrix_writer, strange but works fine
        bottom_ram.raddr = row_address * MATRIX_WIDTH + col_address;
        top_out = top_ram.read_data;
        bottom_out = bottom_ram.read_data;
     }
    
  }
}
