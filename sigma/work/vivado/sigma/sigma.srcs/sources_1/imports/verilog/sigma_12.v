/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module sigma_12 (
    input clk,
    input rst,
    input slowclock,
    input [31:0] id,
    input [15:0] md,
    input [15:0] buttons,
    output reg [31:0] ia,
    output reg [15:0] ma,
    output reg [15:0] mwd,
    output reg wr,
    output reg [7:0] led,
    output reg [15:0] level,
    output reg [15:0] pegs,
    output reg [15:0] selected_peg,
    output reg [15:0] val_move,
    output reg [15:0] space_check,
    output reg [15:0] possible,
    output reg [255:0] debug,
    output reg [5:0] alufn,
    output reg [7:0] alu_a,
    output reg [7:0] alu_b,
    output reg [7:0] wdsel_out
  );
  
  
  
  wire [1-1:0] M_cu_bsel;
  wire [1-1:0] M_cu_ra2sel;
  wire [6-1:0] M_cu_alufn;
  wire [2-1:0] M_cu_wdsel;
  wire [3-1:0] M_cu_pcsel;
  wire [1-1:0] M_cu_wasel;
  wire [1-1:0] M_cu_werf;
  wire [1-1:0] M_cu_wr;
  reg [6-1:0] M_cu_id;
  reg [1-1:0] M_cu_z;
  cu_23 cu (
    .rst(rst),
    .id(M_cu_id),
    .z(M_cu_z),
    .bsel(M_cu_bsel),
    .ra2sel(M_cu_ra2sel),
    .alufn(M_cu_alufn),
    .wdsel(M_cu_wdsel),
    .pcsel(M_cu_pcsel),
    .wasel(M_cu_wasel),
    .werf(M_cu_werf),
    .wr(M_cu_wr)
  );
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [16-1:0] M_alu_randout;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  reg [1-1:0] M_alu_slow_clock;
  alu_24 alu (
    .clk(clk),
    .rst(rst),
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .slow_clock(M_alu_slow_clock),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .randout(M_alu_randout)
  );
  wire [16-1:0] M_regfile_rd1;
  wire [16-1:0] M_regfile_rd2;
  wire [16-1:0] M_regfile_level;
  wire [16-1:0] M_regfile_pegs;
  wire [16-1:0] M_regfile_selected_peg;
  wire [16-1:0] M_regfile_val_move;
  wire [16-1:0] M_regfile_space_check;
  wire [16-1:0] M_regfile_possible;
  wire [256-1:0] M_regfile_debug;
  reg [5-1:0] M_regfile_ra1;
  reg [5-1:0] M_regfile_ra2;
  reg [1-1:0] M_regfile_we;
  reg [16-1:0] M_regfile_wd;
  reg [5-1:0] M_regfile_wa;
  reg [16-1:0] M_regfile_buttons;
  regfile_25 regfile (
    .clk(clk),
    .ra1(M_regfile_ra1),
    .ra2(M_regfile_ra2),
    .we(M_regfile_we),
    .wd(M_regfile_wd),
    .wa(M_regfile_wa),
    .buttons(M_regfile_buttons),
    .rd1(M_regfile_rd1),
    .rd2(M_regfile_rd2),
    .level(M_regfile_level),
    .pegs(M_regfile_pegs),
    .selected_peg(M_regfile_selected_peg),
    .val_move(M_regfile_val_move),
    .space_check(M_regfile_space_check),
    .possible(M_regfile_possible),
    .debug(M_regfile_debug)
  );
  wire [32-1:0] M_pc_unit_ia;
  wire [32-1:0] M_pc_unit_pc_4;
  reg [16-1:0] M_pc_unit_c;
  reg [16-1:0] M_pc_unit_ra;
  reg [1-1:0] M_pc_unit_slow_clock;
  reg [3-1:0] M_pc_unit_pcsel;
  pc_unit_26 pc_unit (
    .clk(clk),
    .rst(rst),
    .c(M_pc_unit_c),
    .ra(M_pc_unit_ra),
    .slow_clock(M_pc_unit_slow_clock),
    .pcsel(M_pc_unit_pcsel),
    .ia(M_pc_unit_ia),
    .pc_4(M_pc_unit_pc_4)
  );
  
  always @* begin
    debug = M_regfile_debug;
    M_cu_id = id[26+5-:6];
    M_pc_unit_slow_clock = slowclock;
    M_pc_unit_pcsel = M_cu_pcsel;
    M_pc_unit_ra = M_regfile_rd1;
    M_pc_unit_c = id[0+15-:16];
    ia = M_pc_unit_ia;
    M_regfile_ra1 = id[16+4-:5];
    
    case (M_cu_ra2sel)
      1'h0: begin
        M_regfile_ra2 = id[11+4-:5];
      end
      1'h1: begin
        M_regfile_ra2 = id[21+4-:5];
      end
      default: begin
        M_regfile_ra2 = id[11+4-:5];
      end
    endcase
    M_regfile_buttons = buttons;
    
    case (M_cu_wasel)
      1'h0: begin
        M_regfile_wa = id[21+4-:5];
      end
      1'h1: begin
        M_regfile_wa = 5'h1e;
      end
      default: begin
        M_regfile_wa = id[21+4-:5];
      end
    endcase
    M_regfile_we = 1'h0;
    if (slowclock) begin
      M_regfile_we = M_cu_werf;
    end
    M_cu_z = ~(|M_regfile_rd1);
    M_alu_alufn = M_cu_alufn;
    M_alu_a = M_regfile_rd1;
    
    case (M_cu_bsel)
      1'h0: begin
        M_alu_b = M_regfile_rd2;
        alu_b = M_regfile_rd2;
      end
      1'h1: begin
        M_alu_b = id[0+15-:16];
        alu_b = id[0+15-:16];
      end
      default: begin
        alu_b = M_regfile_rd2;
        M_alu_b = M_regfile_rd2;
      end
    endcase
    M_alu_slow_clock = slowclock;
    ma = M_alu_out;
    mwd = M_regfile_rd2;
    wr = M_cu_wr;
    
    case (M_cu_wdsel)
      2'h0: begin
        M_regfile_wd = M_pc_unit_pc_4[0+15-:16];
        wdsel_out = M_pc_unit_pc_4[0+15-:16];
      end
      2'h1: begin
        M_regfile_wd = M_alu_out;
        wdsel_out = M_alu_out;
      end
      2'h2: begin
        M_regfile_wd = md;
        wdsel_out = md;
      end
      default: begin
        M_regfile_wd = 1'h0;
        wdsel_out = 1'h0;
      end
    endcase
    pegs = M_regfile_pegs;
    level = M_regfile_level;
    selected_peg = M_regfile_selected_peg;
    val_move = M_regfile_val_move;
    space_check = M_regfile_space_check;
    possible = M_regfile_possible;
    led = 1'h0;
    alufn = M_cu_alufn;
    alu_a = M_regfile_rd1;
  end
endmodule
