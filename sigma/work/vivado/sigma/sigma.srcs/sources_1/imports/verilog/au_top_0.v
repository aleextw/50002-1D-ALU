/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg red0,
    output reg green0,
    output reg blue0,
    output reg red1,
    output reg green1,
    output reg blue1,
    output reg latch,
    output reg blank,
    output reg sclk_out,
    output reg [3:0] address
  );
  
  
  
  reg rst;
  
  localparam NUM_DATA = 7'h4e;
  
  wire [32-1:0] M_inst_mem_id;
  reg [32-1:0] M_inst_mem_ia;
  inst_mem_1 inst_mem (
    .ia(M_inst_mem_ia),
    .id(M_inst_mem_id)
  );
  
  wire [16-1:0] M_data_rom_out;
  reg [16-1:0] M_data_rom_address;
  data_rom_2 data_rom (
    .address(M_data_rom_address),
    .out(M_data_rom_out)
  );
  
  wire [64-1:0] M_btd_digits;
  reg [54-1:0] M_btd_value;
  bin_to_dec_3 btd (
    .value(M_btd_value),
    .digits(M_btd_digits)
  );
  
  wire [4-1:0] M_ss_sel_dec_out;
  reg [2-1:0] M_ss_sel_dec_in;
  decoder_4 ss_sel_dec (
    .in(M_ss_sel_dec_in),
    .out(M_ss_sel_dec_out)
  );
  
  wire [7-1:0] M_ss_segs;
  reg [4-1:0] M_ss_char;
  seven_seg_5 ss (
    .char(M_ss_char),
    .segs(M_ss_segs)
  );
  
  wire [16-1:0] M_sel_peg_dec_out;
  reg [4-1:0] M_sel_peg_dec_in;
  decoder_6 sel_peg_dec (
    .in(M_sel_peg_dec_in),
    .out(M_sel_peg_dec_out)
  );
  
  wire [(5'h10+0)-1:0] M_edge_det_out;
  reg [(5'h10+0)-1:0] M_edge_det_in;
  
  genvar GEN_edge_det0;
  generate
  for (GEN_edge_det0=0;GEN_edge_det0<5'h10;GEN_edge_det0=GEN_edge_det0+1) begin: edge_det_gen_0
    edge_detector_7 edge_det (
      .clk(clk),
      .in(M_edge_det_in[GEN_edge_det0*(1)+(1)-1-:(1)]),
      .out(M_edge_det_out[GEN_edge_det0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  localparam LOAD_ram_writer = 2'd0;
  localparam WAIT_ram_writer = 2'd1;
  localparam GO_ram_writer = 2'd2;
  
  reg [1:0] M_ram_writer_d, M_ram_writer_q = LOAD_ram_writer;
  reg [7:0] M_writer_counter_d, M_writer_counter_q = 1'h0;
  wire [1-1:0] M_io_cnd_out;
  reg [1-1:0] M_io_cnd_in;
  button_conditioner_8 io_cnd (
    .clk(clk),
    .in(M_io_cnd_in),
    .out(M_io_cnd_out)
  );
  wire [1-1:0] M_dip_cnd_out;
  reg [1-1:0] M_dip_cnd_in;
  button_conditioner_8 dip_cnd (
    .clk(clk),
    .in(M_dip_cnd_in),
    .out(M_dip_cnd_out)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_9 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_slow_clock_edge_detector_out;
  reg [1-1:0] M_slow_clock_edge_detector_in;
  edge_detector_10 slow_clock_edge_detector (
    .clk(clk),
    .in(M_slow_clock_edge_detector_in),
    .out(M_slow_clock_edge_detector_out)
  );
  wire [16-1:0] M_data_mem_out;
  reg [1-1:0] M_data_mem_wr;
  reg [16-1:0] M_data_mem_wd;
  reg [16-1:0] M_data_mem_addr;
  data_mem_11 data_mem (
    .clk(clk),
    .wr(M_data_mem_wr),
    .wd(M_data_mem_wd),
    .addr(M_data_mem_addr),
    .out(M_data_mem_out)
  );
  wire [32-1:0] M_sigma_ia;
  wire [16-1:0] M_sigma_ma;
  wire [16-1:0] M_sigma_mwd;
  wire [1-1:0] M_sigma_wr;
  wire [8-1:0] M_sigma_led;
  wire [16-1:0] M_sigma_level;
  wire [16-1:0] M_sigma_pegs;
  wire [16-1:0] M_sigma_selected_peg;
  wire [16-1:0] M_sigma_val_move;
  wire [16-1:0] M_sigma_space_check;
  wire [16-1:0] M_sigma_possible;
  wire [256-1:0] M_sigma_debug;
  wire [6-1:0] M_sigma_alufn;
  wire [8-1:0] M_sigma_alu_a;
  wire [8-1:0] M_sigma_alu_b;
  wire [8-1:0] M_sigma_wdsel_out;
  reg [1-1:0] M_sigma_rst;
  reg [1-1:0] M_sigma_slowclock;
  reg [32-1:0] M_sigma_id;
  reg [16-1:0] M_sigma_md;
  reg [16-1:0] M_sigma_buttons;
  sigma_12 sigma (
    .clk(clk),
    .rst(M_sigma_rst),
    .slowclock(M_sigma_slowclock),
    .id(M_sigma_id),
    .md(M_sigma_md),
    .buttons(M_sigma_buttons),
    .ia(M_sigma_ia),
    .ma(M_sigma_ma),
    .mwd(M_sigma_mwd),
    .wr(M_sigma_wr),
    .led(M_sigma_led),
    .level(M_sigma_level),
    .pegs(M_sigma_pegs),
    .selected_peg(M_sigma_selected_peg),
    .val_move(M_sigma_val_move),
    .space_check(M_sigma_space_check),
    .possible(M_sigma_possible),
    .debug(M_sigma_debug),
    .alufn(M_sigma_alufn),
    .alu_a(M_sigma_alu_a),
    .alu_b(M_sigma_alu_b),
    .wdsel_out(M_sigma_wdsel_out)
  );
  wire [6-1:0] M_matrixwriter_col_index;
  wire [4-1:0] M_matrixwriter_row_index;
  wire [1-1:0] M_matrixwriter_red0;
  wire [1-1:0] M_matrixwriter_green0;
  wire [1-1:0] M_matrixwriter_blue0;
  wire [1-1:0] M_matrixwriter_red1;
  wire [1-1:0] M_matrixwriter_green1;
  wire [1-1:0] M_matrixwriter_blue1;
  wire [1-1:0] M_matrixwriter_latch;
  wire [1-1:0] M_matrixwriter_blank;
  wire [1-1:0] M_matrixwriter_sclk_out;
  wire [4-1:0] M_matrixwriter_address;
  wire [16-1:0] M_matrixwriter_debug;
  reg [6-1:0] M_matrixwriter_data;
  matrix_writer_13 matrixwriter (
    .clk(clk),
    .rst(rst),
    .data(M_matrixwriter_data),
    .col_index(M_matrixwriter_col_index),
    .row_index(M_matrixwriter_row_index),
    .red0(M_matrixwriter_red0),
    .green0(M_matrixwriter_green0),
    .blue0(M_matrixwriter_blue0),
    .red1(M_matrixwriter_red1),
    .green1(M_matrixwriter_green1),
    .blue1(M_matrixwriter_blue1),
    .latch(M_matrixwriter_latch),
    .blank(M_matrixwriter_blank),
    .sclk_out(M_matrixwriter_sclk_out),
    .address(M_matrixwriter_address),
    .debug(M_matrixwriter_debug)
  );
  wire [4-1:0] M_ramwriter_row_address_top;
  wire [6-1:0] M_ramwriter_col_address_top;
  wire [1-1:0] M_ramwriter_we_top;
  wire [3-1:0] M_ramwriter_wd_top;
  wire [4-1:0] M_ramwriter_row_address_btm;
  wire [6-1:0] M_ramwriter_col_address_btm;
  wire [1-1:0] M_ramwriter_we_btm;
  wire [3-1:0] M_ramwriter_wd_btm;
  wire [1-1:0] M_ramwriter_ready;
  reg [1-1:0] M_ramwriter_reload;
  reg [48-1:0] M_ramwriter_new_data;
  matrix_ram_writer_14 ramwriter (
    .clk(clk),
    .rst(rst),
    .reload(M_ramwriter_reload),
    .new_data(M_ramwriter_new_data),
    .row_address_top(M_ramwriter_row_address_top),
    .col_address_top(M_ramwriter_col_address_top),
    .we_top(M_ramwriter_we_top),
    .wd_top(M_ramwriter_wd_top),
    .row_address_btm(M_ramwriter_row_address_btm),
    .col_address_btm(M_ramwriter_col_address_btm),
    .we_btm(M_ramwriter_we_btm),
    .wd_btm(M_ramwriter_wd_btm),
    .ready(M_ramwriter_ready)
  );
  wire [3-1:0] M_matrixram_top_out;
  wire [3-1:0] M_matrixram_bottom_out;
  reg [4-1:0] M_matrixram_row_address;
  reg [6-1:0] M_matrixram_col_address;
  reg [4-1:0] M_matrixram_row_address_top;
  reg [6-1:0] M_matrixram_col_address_top;
  reg [1-1:0] M_matrixram_we_top;
  reg [3-1:0] M_matrixram_wd_top;
  reg [4-1:0] M_matrixram_row_address_btm;
  reg [6-1:0] M_matrixram_col_address_btm;
  reg [1-1:0] M_matrixram_we_btm;
  reg [3-1:0] M_matrixram_wd_btm;
  reg [1-1:0] M_matrixram_ready;
  matrix_ram_15 matrixram (
    .clk(clk),
    .rst(rst),
    .row_address(M_matrixram_row_address),
    .col_address(M_matrixram_col_address),
    .row_address_top(M_matrixram_row_address_top),
    .col_address_top(M_matrixram_col_address_top),
    .we_top(M_matrixram_we_top),
    .wd_top(M_matrixram_wd_top),
    .row_address_btm(M_matrixram_row_address_btm),
    .col_address_btm(M_matrixram_col_address_btm),
    .we_btm(M_matrixram_we_btm),
    .wd_btm(M_matrixram_wd_btm),
    .ready(M_matrixram_ready),
    .top_out(M_matrixram_top_out),
    .bottom_out(M_matrixram_bottom_out)
  );
  wire [1-1:0] M_cnt0_value;
  counter_16 cnt0 (
    .clk(clk),
    .rst(rst),
    .value(M_cnt0_value)
  );
  wire [1-1:0] M_cnt1_value;
  counter_17 cnt1 (
    .clk(clk),
    .rst(rst),
    .value(M_cnt1_value)
  );
  wire [1-1:0] M_cnt2_value;
  counter_18 cnt2 (
    .clk(clk),
    .rst(rst),
    .value(M_cnt2_value)
  );
  wire [1-1:0] M_cnt3_value;
  counter_19 cnt3 (
    .clk(clk),
    .rst(rst),
    .value(M_cnt3_value)
  );
  wire [2-1:0] M_ss_sel_value;
  counter_20 ss_sel (
    .clk(clk),
    .rst(rst),
    .value(M_ss_sel_value)
  );
  
  always @* begin
    M_ram_writer_d = M_ram_writer_q;
    M_writer_counter_d = M_writer_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    
    case (io_dip[0+6+1-:2])
      2'h0: begin
        led[0+0-:1] = M_cnt0_value;
      end
      2'h1: begin
        led[0+0-:1] = M_cnt1_value;
      end
      2'h2: begin
        led[0+0-:1] = M_cnt2_value;
      end
      2'h3: begin
        led[0+0-:1] = M_cnt3_value;
      end
    endcase
    M_ss_sel_dec_in = M_ss_sel_value;
    M_btd_value = M_sigma_ia[0+15-:16];
    M_ss_char = M_btd_digits[(M_ss_sel_value)*4+3-:4];
    io_sel = ~M_ss_sel_dec_out;
    io_seg = ~M_ss_segs;
    M_io_cnd_in = io_button[0+0-:1];
    M_dip_cnd_in = io_dip[0+0+0-:1];
    M_edge_det_in = io_dip[8+15-:16];
    
    case (io_dip[0+6+1-:2])
      2'h0: begin
        M_slow_clock_edge_detector_in = M_cnt0_value;
      end
      2'h1: begin
        M_slow_clock_edge_detector_in = M_cnt1_value;
      end
      2'h2: begin
        M_slow_clock_edge_detector_in = M_cnt2_value;
      end
      2'h3: begin
        M_slow_clock_edge_detector_in = M_cnt3_value;
      end
      default: begin
        M_slow_clock_edge_detector_in = M_cnt0_value;
      end
    endcase
    M_sigma_slowclock = M_slow_clock_edge_detector_out & (M_io_cnd_out | M_dip_cnd_out);
    M_sigma_rst = rst;
    M_data_mem_wr = M_sigma_wr;
    M_data_mem_addr = M_sigma_ma;
    M_data_mem_wd = M_sigma_mwd;
    M_inst_mem_ia = M_sigma_ia;
    M_sigma_id = M_inst_mem_id;
    M_sigma_md = M_data_mem_out;
    M_sigma_rst = 1'h0;
    M_matrixwriter_data = {M_matrixram_bottom_out, M_matrixram_top_out};
    red0 = M_matrixwriter_red0;
    red1 = M_matrixwriter_red1;
    green0 = M_matrixwriter_green0;
    green1 = M_matrixwriter_green1;
    blue0 = M_matrixwriter_blue0;
    blue1 = M_matrixwriter_blue1;
    latch = M_matrixwriter_latch;
    sclk_out = M_matrixwriter_sclk_out;
    blank = M_matrixwriter_blank;
    address = M_matrixwriter_address;
    M_ramwriter_reload = M_slow_clock_edge_detector_out;
    M_sigma_buttons = M_edge_det_out;
    led = M_sigma_led;
    M_sel_peg_dec_in = M_sigma_selected_peg[0+3-:4];
    M_ramwriter_new_data = {M_sel_peg_dec_out >> 1'h1, M_sigma_val_move, M_sigma_pegs};
    M_matrixram_row_address_top = M_ramwriter_row_address_top;
    M_matrixram_col_address_top = M_ramwriter_col_address_top;
    M_matrixram_we_top = M_ramwriter_we_top;
    M_matrixram_wd_top = M_ramwriter_wd_top;
    M_matrixram_row_address_btm = M_ramwriter_row_address_btm;
    M_matrixram_col_address_btm = M_ramwriter_col_address_btm;
    M_matrixram_we_btm = M_ramwriter_we_btm;
    M_matrixram_wd_btm = M_ramwriter_wd_btm;
    M_matrixram_ready = M_ramwriter_ready;
    M_matrixram_row_address = M_matrixwriter_row_index;
    M_matrixram_col_address = M_matrixwriter_col_index;
    
    case (io_dip[0+1+0-:1])
      1'h0: begin
        io_led[16+7-:8] = M_inst_mem_id[0+7-:8];
      end
      1'h1: begin
        io_led[16+7-:8] = M_sigma_ma[0+7-:8];
      end
    endcase
    
    case (io_dip[16+0+1-:2])
      2'h0: begin
        led = M_sigma_alufn;
      end
      2'h1: begin
        led = M_sigma_alu_a;
      end
      2'h2: begin
        led = M_sigma_alu_b;
      end
      2'h3: begin
        led = M_data_mem_out;
      end
    endcase
    io_led[0+15-:16] = M_sigma_debug[(io_dip[0+2+3-:4])*16+15-:16];
    M_data_rom_address = M_writer_counter_q;
    
    case (M_ram_writer_q)
      LOAD_ram_writer: begin
        M_sigma_rst = 1'h1;
        M_writer_counter_d = M_writer_counter_q + 1'h1;
        M_data_mem_wr = 1'h1;
        M_data_mem_addr = M_writer_counter_q << 1'h1;
        M_data_mem_wd = M_data_rom_out;
        if (M_writer_counter_q == 7'h4e) begin
          M_ram_writer_d = WAIT_ram_writer;
        end
      end
      WAIT_ram_writer: begin
        M_sigma_rst = 1'h1;
        M_data_mem_wr = 1'h0;
        M_data_mem_addr = M_writer_counter_q << 1'h1;
        M_data_mem_wd = M_data_rom_out;
        M_ram_writer_d = GO_ram_writer;
      end
      GO_ram_writer: begin
        M_sigma_rst = 1'h0;
        M_ram_writer_d = GO_ram_writer;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_writer_counter_q <= M_writer_counter_d;
    M_ram_writer_q <= M_ram_writer_d;
  end
  
endmodule
