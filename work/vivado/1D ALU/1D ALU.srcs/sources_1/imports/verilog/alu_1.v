/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_1 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_adder_s;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  reg [1-1:0] M_adder_alufn;
  sixteen_bit_adder_10 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn(M_adder_alufn),
    .s(M_adder_s),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [16-1:0] M_mlt_p;
  reg [16-1:0] M_mlt_a;
  reg [16-1:0] M_mlt_b;
  mult_11 mlt (
    .a(M_mlt_a),
    .b(M_mlt_b),
    .p(M_mlt_p)
  );
  
  wire [16-1:0] M_bl_out;
  reg [16-1:0] M_bl_a;
  reg [16-1:0] M_bl_b;
  reg [2-1:0] M_bl_alufn;
  bool_12 bl (
    .a(M_bl_a),
    .b(M_bl_b),
    .alufn(M_bl_alufn),
    .out(M_bl_out)
  );
  
  wire [16-1:0] M_bs_out;
  reg [16-1:0] M_bs_a;
  reg [16-1:0] M_bs_b;
  reg [3-1:0] M_bs_alufn;
  bitshift_13 bs (
    .a(M_bs_a),
    .b(M_bs_b),
    .alufn(M_bs_alufn),
    .out(M_bs_out)
  );
  
  wire [16-1:0] M_cmp_out;
  reg [1-1:0] M_cmp_z;
  reg [1-1:0] M_cmp_v;
  reg [1-1:0] M_cmp_n;
  reg [3-1:0] M_cmp_alufn;
  compare_14 cmp (
    .z(M_cmp_z),
    .v(M_cmp_v),
    .n(M_cmp_n),
    .alufn(M_cmp_alufn),
    .out(M_cmp_out)
  );
  
  reg temp_z;
  
  reg temp_v;
  
  reg temp_n;
  
  always @* begin
    M_adder_a = a;
    M_adder_b = b;
    M_adder_alufn = alufn[0+0-:1];
    temp_z = M_adder_z;
    temp_v = M_adder_v;
    temp_n = M_adder_n;
    M_mlt_a = a;
    M_mlt_b = b;
    M_bl_a = a;
    M_bl_b = b;
    M_bl_alufn = alufn[0+1-:2];
    M_bs_a = a;
    M_bs_b = b;
    M_bs_alufn = alufn[0+2-:3];
    M_cmp_z = temp_z;
    M_cmp_v = temp_v;
    M_cmp_n = temp_n;
    M_cmp_alufn = alufn[0+2-:3];
    
    case (alufn[4+1-:2])
      1'h0: begin
        
        case (alufn[2+0-:1])
          1'h0: begin
            out = M_adder_s;
          end
          1'h1: begin
            out = M_mlt_p;
          end
          default: begin
            out = a;
          end
        endcase
      end
      1'h1: begin
        out = M_bl_out;
      end
      2'h2: begin
        out = M_bs_out;
      end
      2'h3: begin
        out = M_cmp_out;
      end
      default: begin
        out = a;
      end
    endcase
    z = temp_z;
    v = temp_v;
    n = temp_n;
  end
endmodule
