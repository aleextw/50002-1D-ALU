/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module sixteen_bit_adder_9 (
    input [15:0] a,
    input [15:0] b,
    input alufn,
    output reg [15:0] s,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [(5'h10+0)-1:0] M_adder_sum;
  wire [(5'h10+0)-1:0] M_adder_cout;
  reg [(5'h10+0)-1:0] M_adder_a;
  reg [(5'h10+0)-1:0] M_adder_b;
  reg [(5'h10+0)-1:0] M_adder_cin;
  
  genvar GEN_adder0;
  generate
  for (GEN_adder0=0;GEN_adder0<5'h10;GEN_adder0=GEN_adder0+1) begin: adder_gen_0
    one_bit_adder_18 adder (
      .a(M_adder_a[GEN_adder0*(1)+(1)-1-:(1)]),
      .b(M_adder_b[GEN_adder0*(1)+(1)-1-:(1)]),
      .cin(M_adder_cin[GEN_adder0*(1)+(1)-1-:(1)]),
      .sum(M_adder_sum[GEN_adder0*(1)+(1)-1-:(1)]),
      .cout(M_adder_cout[GEN_adder0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  reg [15:0] xb;
  
  reg [15:0] sum;
  
  reg cout;
  
  always @* begin
    xb = b ^ {5'h10{alufn}};
    M_adder_a = a;
    M_adder_b = xb;
    M_adder_cin[1+14-:15] = M_adder_cout[0+14-:15];
    M_adder_cin[0+0-:1] = alufn;
    sum = M_adder_sum;
    cout = M_adder_cout[15+0-:1];
    z = !(|sum);
    v = ((xb[15+0-:1] & a[15+0-:1]) & !sum[15+0-:1]) | ((!xb[15+0-:1] & !a[15+0-:1]) & sum[15+0-:1]);
    n = sum[15+0-:1];
    s = sum;
  end
endmodule
