/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module sequence_checker_3 (
    input [2:0] buttons,
    input button_reset,
    input clk,
    input rst,
    input exButton,
    input [14:0] exButtons,
    output reg [2:0] out_result,
    output reg out_buttonseq
  );
  
  
  
  reg [2:0] M_sequence_d, M_sequence_q = 1'h0;
  
  reg [2:0] M_result_d, M_result_q = 1'h0;
  
  localparam MATCH = 9'h1ab;
  
  
  localparam WAITFIRSTPRESS_brain = 1'd0;
  localparam CHECKPRESS_brain = 1'd1;
  
  reg M_brain_d, M_brain_q = WAITFIRSTPRESS_brain;
  
  always @* begin
    M_brain_d = M_brain_q;
    M_result_d = M_result_q;
    M_sequence_d = M_sequence_q;
    
    
    case (M_brain_q)
      WAITFIRSTPRESS_brain: begin
        if (buttons[2+0-:1] | buttons[1+0-:1] | buttons[0+0-:1]) begin
          if (buttons[0+0-:1]) begin
            M_sequence_d = 3'h6;
          end else begin
            if (buttons[1+0-:1]) begin
              M_sequence_d = 3'h5;
            end else begin
              if (buttons[2+0-:1]) begin
                M_sequence_d = 3'h3;
              end
            end
          end
          M_brain_d = CHECKPRESS_brain;
        end else begin
          if (M_sequence_q == 3'h0) begin
            M_result_d = 3'h7;
            M_brain_d = WAITFIRSTPRESS_brain;
          end else begin
            if (M_sequence_q == 3'h7) begin
              M_result_d = 3'h0;
              M_brain_d = WAITFIRSTPRESS_brain;
            end
          end
        end
      end
      CHECKPRESS_brain: begin
        if (M_sequence_q == 3'h3) begin
          M_result_d = 3'h6;
        end else begin
          if (M_sequence_q == 3'h5) begin
            M_result_d = 3'h5;
          end else begin
            if (M_sequence_q == 3'h6) begin
              M_result_d = 3'h3;
            end else begin
              M_result_d = 3'h7;
            end
          end
        end
        M_brain_d = CHECKPRESS_brain;
        if (button_reset) begin
          M_sequence_d = 3'h0;
          M_result_d = 3'h0;
          M_brain_d = WAITFIRSTPRESS_brain;
        end else begin
          if (exButton) begin
            M_sequence_d = 3'h7;
            M_result_d = 3'h7;
            M_brain_d = WAITFIRSTPRESS_brain;
          end else begin
            if (exButtons[0+0-:1] | exButtons[1+0-:1] | exButtons[2+0-:1] | exButtons[3+0-:1] | exButtons[4+0-:1] | exButtons[5+0-:1] | exButtons[6+0-:1] | exButtons[7+0-:1] | exButtons[8+0-:1] | exButtons[9+0-:1] | exButtons[10+0-:1] | exButtons[11+0-:1] | exButtons[12+0-:1] | exButtons[13+0-:1] | exButtons[14+0-:1]) begin
              M_sequence_d = 3'h7;
              M_result_d = 3'h7;
              M_brain_d = WAITFIRSTPRESS_brain;
            end
          end
        end
      end
    endcase
    out_result = M_result_q;
    out_buttonseq = M_sequence_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_result_q <= 1'h0;
    end else begin
      M_result_q <= M_result_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_sequence_q <= 1'h0;
    end else begin
      M_sequence_q <= M_sequence_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_brain_q <= 1'h0;
    end else begin
      M_brain_q <= M_brain_d;
    end
  end
  
endmodule
