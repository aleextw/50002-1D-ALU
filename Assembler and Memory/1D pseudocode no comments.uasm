init:
SVC()
BEQ(R0, init, R31)
SHRC(R0, 4, R0)
BF(R0, init, R31)
CMOVE(1, R26)
start:
CMPEQC(R26,1,R0)
BT(R0, level_one_setup, R31)
CMPEQC(R26,2,R0)
BT(R0, level_two_setup, R31)
CMPEQC(R26,3,R0)
BT(R0, level_three_setup, R31)
CMOVE(-1, R24)
game_end_light_loop:
SHRC(R24, 1, R24)
BT(R24, game_end_light_loop, R24)
BF(R31, init, R31)
level_one_setup:
LD(level_one_position, R24)
BF(R31, array_setup, R31)
level_two_setup:
LD(level_two_position, R24)
BF(R31, array_setup, R31)
level_three_setup:
RAND(R0)
XORC(R0, 65535, R24)
BF(R31, array_setup, R31)
array_setup:
CMOVE(0, R1)
CMOVE(1, R0)
array_setup_loop:
SHR(R24, R1, R2)
AND(R2, R0, R3)
SHLC(R1, 1, R4)
ST(R3, pegboard_array, R4)
ADDC(R1, 1, R1)
CMPEQC(R1,15,R5)
BF(R5, array_setup_loop, R31)
game_start:
MOVE(R31, R23)
MOVE(R31, R25)
a_input:
SVC()
BEQ(R0, a_input, R31)
SHRC(R0, 4, R1)
BT(R1, start, R31)
SUBC(R0, 1, R1)
SHR(R24, R1, R2)
ANDC(R2, 1, R2)
BEQ(R2, a_input, R31)
MOVE(R31, R2)
MOVE(R31, R3)
SHLC(R1, 3, R1)
check_a_position:
LD(R1, jump_array, R4)
SHRC(R4, 8, R5)
SUBC(R5, 1, R7)
SHLC(R7, 1, R7)
SHLC(R4, 8, R6)
SHRC(R6, 8, R6)
SUBC(R6, 1, R8)
SHLC(R8, 1, R8)
LD(R7, pegboard_array, R7)
LD(R8, pegboard_array, R8)
CMPLE(R8, R7, R7)
BF(R7, add_position, R31)
ADDC(R2, 1, R2)
ADDC(R1, 2, R1)
CMPEQC(R2, 4, R8)
BF(R8, check_a_position, R31)
BT(R8, any_position_exist_check, R31)
add_position:
SUBC(R5, 1, R5)
CMOVE(1, R6)
SHL(R6, R5, R6)
OR(R6, R3, R3)
ADDC(R2, 1, R2)
ADDC(R1, 2, R1)
CMPEQC(R2, 4, R8)
BF(R8, check_a_position, R31)
any_position_exist_check:
BF(R3, a_input, R31)
MOVE(R3, R25)
MOVE(R0, R23)
b_input:
SVC()
BEQ(R0, b_input, R31)
SHRC(R0, 4, R1)
BT(R1, start, R31)
CMPEQ(R0, R23, R1)
BT(R1, a_input, R31)
SUBC(R0, 1, R1)
CMOVE(1, R2)
SHL(R2, R1, R2)
AND(R25, R2, R2)
BF(R2, b_input, R31)
peg_search:
LD(R1, jump_array, R2)
SHRC(R2, 8, R3)
SHLC(R2, 8, R4)
SHRC(R4, 8, R4)
CMPEQ(R3, R0, R5)
ADDC(R1, 2, R1)
BF(R5, peg_search, R31)
SUBC(R23, 1, R1)
CMOVE(1, R2)
SHL(R2, R1, R2)
XOR(R24, R2, R24)
SUBC(R3, 1, R1)
CMOVE(1, R2)
SHL(R2, R1, R2)
XOR(R24, R2, R24)
SUBC(R4, 1, R1)
CMOVE(1, R2)
SHL(R2, R1, R2)
XOR(R24, R2, R24)
array_store:
MOVE(R31, R1)
CMOVE(1, R0)
array_store_loop:
SHR(R24, R1, R2)
AND(R2, R0, R3)
SHLC(R1, 1, R4)
ST(R3, pegboard_array, R4)
ADDC(R1, 1, R1)
CMPEQC(R1,15,R5)
BF(R5, array_store_loop, R31)
count_pegs_setup:
MOVE(R24, R1)
MOVE(R31, R0)
CMOVE(1, R2)
count_pegs:
AND(R1, R2, R3)
BEQ(R3, count_pegs_skip, R31)
ADDC(R0, 1, R0)
count_pegs_skip:
SHRC(R1, 1, R1)
BNE(R1, count_pegs, R31)
CMPEQC(R0, 1, R0)
BF(R0, game_start, R31)
level_end:
ADDC(R26, 1, R26)
MOVE(R31, R23)
MOVE(R31, R25)
CMOVE(-1, R24)
level_end_light_loop:
SHRC(R24, 1, R24)
BT(R24, level_end_light_loop, R24)
BF(R31, start, R31)
. = 256
button_handler:
MOVE(R31, R22)
button_handler_loop:
BEQ(R22, button_handler_loop, R31)
MOVE(R22, R0)
MOVE(R31, R22)
JMP(XP, R31)