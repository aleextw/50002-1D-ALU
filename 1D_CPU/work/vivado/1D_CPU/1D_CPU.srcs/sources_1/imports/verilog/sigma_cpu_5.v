/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module sigma_cpu_5 (
    input clk,
    input rst,
    input [15:0] buttons,
    output reg [15:0] level,
    output reg [15:0] pegs,
    output reg [15:0] selected_peg,
    output reg [15:0] val_move
  );
  
  
  
  localparam NUM_DATA = 7'h54;
  
  wire [(5'h10+0)-1:0] M_button_cond_out;
  reg [(5'h10+0)-1:0] M_button_cond_in;
  
  genvar GEN_button_cond0;
  generate
  for (GEN_button_cond0=0;GEN_button_cond0<5'h10;GEN_button_cond0=GEN_button_cond0+1) begin: button_cond_gen_0
    button_conditioner_7 button_cond (
      .clk(clk),
      .in(M_button_cond_in[GEN_button_cond0*(1)+(1)-1-:(1)]),
      .out(M_button_cond_out[GEN_button_cond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(5'h10+0)-1:0] M_edge_det_out;
  reg [(5'h10+0)-1:0] M_edge_det_in;
  
  genvar GEN_edge_det0;
  generate
  for (GEN_edge_det0=0;GEN_edge_det0<5'h10;GEN_edge_det0=GEN_edge_det0+1) begin: edge_det_gen_0
    edge_detector_8 edge_det (
      .clk(clk),
      .in(M_edge_det_in[GEN_edge_det0*(1)+(1)-1-:(1)]),
      .out(M_edge_det_out[GEN_edge_det0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [16-1:0] M_arith_out;
  wire [1-1:0] M_arith_z;
  wire [1-1:0] M_arith_v;
  wire [1-1:0] M_arith_n;
  wire [16-1:0] M_arith_randout;
  reg [1-1:0] M_arith_rst;
  reg [16-1:0] M_arith_a;
  reg [16-1:0] M_arith_b;
  reg [6-1:0] M_arith_alufn;
  reg [1-1:0] M_arith_slow_clock;
  alu_9 arith (
    .clk(clk),
    .rst(M_arith_rst),
    .a(M_arith_a),
    .b(M_arith_b),
    .alufn(M_arith_alufn),
    .slow_clock(M_arith_slow_clock),
    .out(M_arith_out),
    .z(M_arith_z),
    .v(M_arith_v),
    .n(M_arith_n),
    .randout(M_arith_randout)
  );
  wire [16-1:0] M_rf_rd1;
  wire [16-1:0] M_rf_rd2;
  wire [16-1:0] M_rf_level;
  wire [16-1:0] M_rf_pegs;
  wire [16-1:0] M_rf_selected_peg;
  wire [16-1:0] M_rf_val_move;
  reg [5-1:0] M_rf_ra1;
  reg [5-1:0] M_rf_ra2;
  reg [1-1:0] M_rf_we;
  reg [16-1:0] M_rf_wd;
  reg [5-1:0] M_rf_wa;
  reg [16-1:0] M_rf_buttons;
  regfile_10 rf (
    .clk(clk),
    .ra1(M_rf_ra1),
    .ra2(M_rf_ra2),
    .we(M_rf_we),
    .wd(M_rf_wd),
    .wa(M_rf_wa),
    .buttons(M_rf_buttons),
    .rd1(M_rf_rd1),
    .rd2(M_rf_rd2),
    .level(M_rf_level),
    .pegs(M_rf_pegs),
    .selected_peg(M_rf_selected_peg),
    .val_move(M_rf_val_move)
  );
  wire [16-1:0] M_data_out;
  reg [1-1:0] M_data_wr;
  reg [16-1:0] M_data_wd;
  reg [16-1:0] M_data_addr;
  data_mem_11 data (
    .clk(clk),
    .wr(M_data_wr),
    .wd(M_data_wd),
    .addr(M_data_addr),
    .out(M_data_out)
  );
  wire [16-1:0] M_pc_ia;
  wire [16-1:0] M_pc_pc_4;
  reg [1-1:0] M_pc_rst;
  reg [16-1:0] M_pc_id;
  reg [16-1:0] M_pc_ra;
  reg [1-1:0] M_pc_slow_clock;
  reg [3-1:0] M_pc_pcsel;
  pc_unit_12 pc (
    .clk(clk),
    .rst(M_pc_rst),
    .id(M_pc_id),
    .ra(M_pc_ra),
    .slow_clock(M_pc_slow_clock),
    .pcsel(M_pc_pcsel),
    .ia(M_pc_ia),
    .pc_4(M_pc_pc_4)
  );
  localparam LOAD_ram_writer = 2'd0;
  localparam WAIT_ram_writer = 2'd1;
  localparam GO_ram_writer = 2'd2;
  
  reg [1:0] M_ram_writer_d, M_ram_writer_q = LOAD_ram_writer;
  reg [7:0] M_writer_counter_d, M_writer_counter_q = 1'h0;
  wire [1-1:0] M_slow_clock_edge_detector_out;
  reg [1-1:0] M_slow_clock_edge_detector_in;
  edge_detector_4 slow_clock_edge_detector (
    .clk(clk),
    .in(M_slow_clock_edge_detector_in),
    .out(M_slow_clock_edge_detector_out)
  );
  wire [1-1:0] M_cnt_value;
  counter_6 cnt (
    .clk(clk),
    .rst(rst),
    .value(M_cnt_value)
  );
  
  wire [1-1:0] M_cu_bsel;
  wire [1-1:0] M_cu_ra2sel;
  wire [6-1:0] M_cu_alufn;
  wire [2-1:0] M_cu_wdsel;
  wire [3-1:0] M_cu_pcsel;
  wire [1-1:0] M_cu_wasel;
  wire [1-1:0] M_cu_werf;
  wire [1-1:0] M_cu_wr;
  reg [1-1:0] M_cu_rst;
  reg [6-1:0] M_cu_id;
  reg [1-1:0] M_cu_z;
  cu_13 cu (
    .rst(M_cu_rst),
    .id(M_cu_id),
    .z(M_cu_z),
    .bsel(M_cu_bsel),
    .ra2sel(M_cu_ra2sel),
    .alufn(M_cu_alufn),
    .wdsel(M_cu_wdsel),
    .pcsel(M_cu_pcsel),
    .wasel(M_cu_wasel),
    .werf(M_cu_werf),
    .wr(M_cu_wr)
  );
  
  wire [32-1:0] M_instructions_id;
  reg [16-1:0] M_instructions_ia;
  inst_mem_14 instructions (
    .ia(M_instructions_ia),
    .id(M_instructions_id)
  );
  
  wire [16-1:0] M_drom_out;
  reg [16-1:0] M_drom_address;
  data_rom_15 drom (
    .address(M_drom_address),
    .out(M_drom_out)
  );
  
  always @* begin
    M_ram_writer_d = M_ram_writer_q;
    M_writer_counter_d = M_writer_counter_q;
    
    M_rf_we = 1'h0;
    if (M_slow_clock_edge_detector_out) begin
      M_rf_we = M_cu_werf;
    end
    M_arith_slow_clock = M_slow_clock_edge_detector_out;
    M_button_cond_in = buttons;
    M_edge_det_in = M_button_cond_out;
    M_slow_clock_edge_detector_in = M_cnt_value;
    M_pc_slow_clock = M_slow_clock_edge_detector_out;
    M_pc_rst = rst;
    M_instructions_ia = M_pc_ia;
    M_pc_id = M_instructions_id[0+15-:16];
    M_pc_pcsel = M_cu_pcsel;
    M_pc_ra = M_rf_rd1;
    M_cu_rst = rst;
    M_cu_z = ~(|M_rf_rd1);
    M_cu_id = M_instructions_id[26+5-:6];
    M_arith_alufn = M_cu_alufn;
    M_data_wr = M_cu_wr;
    
    case (M_cu_ra2sel)
      1'h0: begin
        M_rf_ra2 = M_instructions_id[11+4-:5];
      end
      1'h1: begin
        M_rf_ra2 = M_instructions_id[21+4-:5];
      end
      default: begin
        M_rf_ra2 = M_instructions_id[11+4-:5];
      end
    endcase
    M_rf_ra1 = M_instructions_id[16+4-:5];
    
    case (M_cu_wasel)
      1'h0: begin
        M_rf_wa = M_instructions_id[21+4-:5];
      end
      1'h1: begin
        M_rf_wa = 5'h1e;
      end
      default: begin
        M_rf_wa = M_instructions_id[21+4-:5];
      end
    endcase
    M_rf_buttons = M_edge_det_out;
    pegs = M_rf_pegs;
    level = M_rf_level;
    selected_peg = M_rf_selected_peg;
    val_move = M_rf_val_move;
    M_arith_rst = rst;
    
    case (M_cu_bsel)
      1'h0: begin
        M_arith_b = M_rf_rd2;
      end
      1'h1: begin
        M_arith_b = M_instructions_id[0+15-:16];
      end
      default: begin
        M_arith_b = M_rf_rd2;
      end
    endcase
    M_arith_a = M_rf_rd1;
    
    case (M_cu_wdsel)
      1'h0: begin
        M_rf_wd = {M_pc_ia[15+0-:1], M_pc_pc_4[0+14-:15]};
      end
      1'h1: begin
        M_rf_wd = M_arith_out;
      end
      2'h2: begin
        M_rf_wd = M_data_out;
      end
      default: begin
        M_rf_wd = M_arith_out;
      end
    endcase
    M_data_addr = M_arith_out;
    M_data_wd = M_rf_rd2;
    M_drom_address = M_writer_counter_q;
    
    case (M_ram_writer_q)
      LOAD_ram_writer: begin
        M_cu_rst = 1'h1;
        M_writer_counter_d = M_writer_counter_q + 1'h1;
        M_data_wr = 1'h1;
        M_data_addr = M_writer_counter_q << 1'h1;
        M_data_wd = M_drom_out;
        if (M_writer_counter_q == 7'h54) begin
          M_ram_writer_d = WAIT_ram_writer;
        end
      end
      WAIT_ram_writer: begin
        M_cu_rst = 1'h1;
        M_data_wr = 1'h0;
        M_data_addr = M_writer_counter_q << 1'h1;
        M_data_wd = M_drom_out;
        M_ram_writer_d = GO_ram_writer;
      end
      GO_ram_writer: begin
        M_data_addr = M_arith_out;
        M_data_wd = M_rf_rd2;
        M_data_wr = M_cu_wr;
        M_ram_writer_d = GO_ram_writer;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_writer_counter_q <= M_writer_counter_d;
    M_ram_writer_q <= M_ram_writer_d;
  end
  
endmodule
