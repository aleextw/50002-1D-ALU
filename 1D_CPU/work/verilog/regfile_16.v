/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfile_16 (
    input clk,
    input [4:0] ra1,
    input [4:0] ra2,
    input we,
    input [15:0] wd,
    input [4:0] wa,
    input [15:0] buttons,
    output reg [15:0] rd1,
    output reg [15:0] rd2,
    output reg [15:0] level,
    output reg [15:0] pegs,
    output reg [15:0] selected_peg,
    output reg [15:0] val_move,
    output reg [15:0] space_check,
    output reg [15:0] possible,
    output reg [255:0] debug
  );
  
  
  
  reg [511:0] M_r_d, M_r_q = 1'h0;
  
  wire [5-1:0] M_button_encoder_out;
  reg [16-1:0] M_button_encoder_in;
  alex_encoder_23 button_encoder (
    .in(M_button_encoder_in),
    .out(M_button_encoder_out)
  );
  
  always @* begin
    M_r_d = M_r_q;
    
    M_button_encoder_in = buttons;
    if (M_button_encoder_out != 1'h0) begin
      M_r_d[352+15-:16] = M_button_encoder_out;
    end
    if (wa != 5'h1f & we) begin
      M_r_d[(wa)*16+15-:16] = wd;
    end
    if (ra1 != 5'h1f) begin
      rd1 = M_r_q[(ra1)*16+15-:16];
    end else begin
      rd1 = 16'h0000;
    end
    if (ra2 != 5'h1f) begin
      rd2 = M_r_q[(ra2)*16+15-:16];
    end else begin
      rd2 = 16'h0000;
    end
    level = M_r_q[416+15-:16];
    pegs = M_r_q[384+15-:16];
    selected_peg = M_r_q[368+15-:16];
    val_move = M_r_q[400+15-:16];
    space_check = M_r_q[384+15-:16];
    possible = M_r_q[0+15-:16];
    debug[0+15-:16] = M_r_q[0+15-:16];
    debug[16+15-:16] = M_r_q[16+15-:16];
    debug[32+15-:16] = M_r_q[32+15-:16];
    debug[48+15-:16] = M_r_q[48+15-:16];
    debug[64+15-:16] = M_r_q[64+15-:16];
    debug[80+15-:16] = M_r_q[80+15-:16];
    debug[96+15-:16] = M_r_q[96+15-:16];
    debug[112+15-:16] = M_r_q[112+15-:16];
    debug[128+15-:16] = M_r_q[128+15-:16];
    debug[144+15-:16] = M_r_q[144+15-:16];
    debug[160+15-:16] = M_r_q[160+15-:16];
    debug[176+15-:16] = M_r_q[368+15-:16];
    debug[192+15-:16] = M_r_q[384+15-:16];
    debug[208+15-:16] = M_r_q[400+15-:16];
    debug[224+15-:16] = M_r_q[416+15-:16];
    debug[240+15-:16] = M_r_q[480+15-:16];
  end
  
  always @(posedge clk) begin
    M_r_q <= M_r_d;
  end
  
endmodule
