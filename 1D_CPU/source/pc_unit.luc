module pc_unit (
    input clk,  // clock
    input rst,  // reset
    input c[16], 
    input ra[16],
    input slow_clock,
    input pcsel[3],
    output ia[32], // why was this just 16?
    output pc_4[32] // why was this just 16?
  ) {
  
  .clk(clk) {
    .rst(rst) {
      dff pc[32]; // why was this just 16?
    }
  }
  

  always {
    ia = pc.q;
    pc_4 = pc.q + 4;
    
    if (slow_clock) {
      
      case(pcsel) {
        0: pc.d = pc.q + 4;
        1: pc.d = pc.q + 4 + c{c[15], c[15:0]} * 4; // internal_pc_4 + id * 4 --> initially not sign extended
        2: pc.d = c{ra[15], ra[14:0]}; // c{internal_ia[15], ra[14:0]} --> using MSB?
        3: pc.d = 1280;
        4: pc.d = 1536; // the SVC address 
        default: pc.d = pc.q; // changed to unchanging pc with invalid pcsel
      }
      
      if(rst){
        pc.d = 0;
      }
    }
  }
}
