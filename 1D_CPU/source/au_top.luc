module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    input button[16],
    output out_led[3][15],
    output seven_seg[7]
  ) {
  
  sig rst;                  // reset signal
  
  seven_seg ss_decoder;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      sigma_cpu sigma;
    }
  }
  
  always {      
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = c{7h00,rst};             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    
    sigma.buttons = button;
    out_led[0] = ~sigma.val_move[14:0];
    out_led[1] = ~sigma.pegs[14:0];
    out_led[2] = ~sigma.selected_peg[14:0];
    
    ss_decoder.char = sigma.selected_peg[3:0];
    seven_seg = ~ss_decoder.segs;
  }
}