module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    input button [16],
    output bank_io[3][16],
    output seven_segment[4]
  ) {
  
  sig rst;                  // reset signal
  
  
  decoder sel_peg_dec(#WIDTH(4));
  
  seven_seg ss;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    edge_detector sced (#RISE(1), #FALL(1));
    
    .rst(rst) {
      sigma_cpu sigma;
      counter cnt(#SIZE(1), #DIV(16));
    }
  }
  
  always {      
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = c{7h00,rst};             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    
    sced.in = cnt.value;
    
    sigma.buttons = button;
    sel_peg_dec.in = sigma.selected_peg[3:0];
    bank_io[0] = sigma.pegs ^ (sel_peg_dec.out >> 1);
    bank_io[1] = (sel_peg_dec.out >> 1);
    bank_io[2] = sigma.val_move;
    
    ss.char = sigma.level[3:0];
    seven_segment = c{~ss.segs[4], ~ss.segs[2], ~ss.segs[1], ~ss.segs[0]};
    
  }
}