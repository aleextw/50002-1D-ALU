module sixteen_bit_adder (
    input a[16],
    input b[16],
    input alufn,
    output s[16],
    output z,
    output v,
    output n
  ) {
  
  
  one_bit_adder adder[16];
  /*     
  xb stores value of 'b' going into the adder
  - If ALUFN[0] == 0, we are performing A + B
  - If ALUFN[0] == 1, we are performing A - B
     
  sum is used as a temporary variable for our adder's sum, since
  we can't read from output s
  
  cout is stored in case we want to implement something with it    
  */
  sig xb[16];
  sig sum[16];
  sig cout;
  
  always {
    xb = b ^ 16x{alufn[0]};  // invert b depending on alufn[0]
    
    adder.a = a;            // connect input a of adder to xa
    adder.b = xb;            // connect input b of adder to xb
    adder.cin[15:1] = adder.cout[14:0];  // connect carry out of [14:0] adder to carry in of [15:1] adder
    adder.cin[0] = alufn[0];    // connect input cin of adder to alufn[0]
    sum = adder.sum;         // store output sum of adder to temp variable sum
    cout = adder.cout[15];   // store output cout of adder to temp variable cout
    
    // Use the OR reduction operator to check if all bits zeroed
    z = !|sum;    
    
    // Check if sum of each operand's MSB differs from sum's MSB
    v = ((xb[15] & a[15]) & !sum[15]) | ((!xb[15] & !a[15]) & sum[15]);
    
    // 2's complement means MSB indicates sign of result
    n = sum[15];
    
    // Finally write our sum to our output s
    s = sum;
}
