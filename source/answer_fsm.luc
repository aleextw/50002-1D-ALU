/*
   Answer FSM: This module contains the states (corresponding to different operations)
   and their outputs, and cycles through all the states and their various inputs.
   Each output is formatted as {a, b, alufn}, for a total of 38 bits.
   A binary counter can be passed as input to cycle through all states in order.
*/

module answer_fsm #(STATES = $clog2(110) : STATES > 0)( 
    input clk,
    input rst,
    input in[STATES],
    output out[38]
  ) {
  
.clk(clk) {
    .rst(rst) {
      // Create fsm and declare all its states
      fsm state(#INIT(ADD)) = {ADD, SUB, MULT, XOR, AND, PASSTHROUGH, OR, SHL, SHR, SRA, RTL, RTR, CMPEQ, CMPLT, CMPLE};
    }
  }
  
  always {
    case (state.q) {
      state.ADD:
        case (in) {
          1: out = b00000000000000000000000000000000000000;
          2: out = b01111111111111110000000000000000000000;
          3: out = b00000000000000000111111111111111000000;
          4: out = b11111111111111110000000000000000000000;
          5: out = b00000000000000001111111111111111000000;
          6: out = b00010010001101000011010001010110000000;
          7: out = b11111000000000011111100000100000000000;
          8: out = b11011110000000000000000010101101000000;
          9: out = b00000000111011111011111000000000000000;
          10: out = b11111111111111111111111111111111000000;
          11: out = b01110000000000000111000000000000000000;
          12: out = b11111111111111110000000000000001000000;
            state.d = state.SUB;
          default: out = b00000000000000000000000000000000000000;
        }
      state.SUB:
        case (in) {
          13: out = b00000000000000000000000000000000000001;
          14: out = b01111111111111110000000000000000000001;
          15: out = b00000000000000000111111111111111000001;
          16: out = b11111111111111110000000000000000000001;
          17: out = b00000000000000000111111111111111000001;
          18: out = b01110110010101000101010000110010000001;
          19: out = b01010100001100100111011001010100000001;
          20: out = b11101101110010111101110010111010000001;
          21: out = b11011100101110101110110111001011000001;
          22: out = b01111111111111111000000000000000000001;
          23: out = b10000000000000000111111111111111000001;
            state.d = state.MULT;
          default: out = b00000000000000000000000000000000000000;
        }
      state.MULT:
        case (in) {
          24: out = b00000000000000000000000000000000000100;
          25: out = b00000000000000000111111111111111000100;
          26: out = b00000000000000001111111111111111000100;
          27: out = b01111111111111110000000000000000000100;
          28: out = b11111111111111110000000000000000000100;
          29: out = b00000000000001010000000000000011000100;
          30: out = b00000000000001011111111111111111000100;
          31: out = b11111111111111100000000000000100000100;
          32: out = b11111111111111101111111111111101000100;
          33: out = b01111111111111110111000000000000000100;
          34: out = b10000000000000001000111111111111000100;
            state.d = state.XOR;
          default: out = b00000000000000000000000000000000000000;
        }
      state.XOR:
        case (in) {
          35: out = b00000000000000000000000000000000010000;
          36: out = b11111111111111111111111111111111010000;
          37: out = b11111111111111110000000000000000010000;
          38: out = b01010101010101011010101010101010010000;
          39: out = b11111111111111110101010101010101010000;
            state.d = state.AND;
          default: out = b00000000000000000000000000000000000000;
        }
      state.AND:
        case (in) {
          40: out = b00000000000000000000000000000000010001;
          41: out = b11111111111111111111111111111111010001;
          42: out = b11111111111111110000000000000000010001;
          43: out = b01010101010101011010101010101010010001;
          44: out = b11011110101011010000000011111111010001;
            state.d = state.PASSTHROUGH;
          default: out = b00000000000000000000000000000000000000;
        }
      state.PASSTHROUGH:
        case (in) {
          45: out = b00000000000000000000000000000000010010;
          46: out = b11111111111111110000000000000000010010;
          47: out = b10111110111011110000000000000000010010;
          48: out = b00010010001101001010101111001101010010;
            state.d = state.OR;
          default: out = b00000000000000000000000000000000000000;
        }
      state.OR:
        case (in) {
          49: out = b00000000000000000000000000000000010011;
          50: out = b11111111111111111111111111111111010011;
          51: out = b11111111111111110000000000000000010011;
          52: out = b01010101010101011010101010101010010011;
          53: out = b11011110000000000000000010101101010011;
            state.d = state.SHL;
          default: out = b00000000000000000000000000000000000000;
        }
      state.SHL:
        case (in) {
          54: out = b11011110101011010000000000000101100000;
          55: out = b11011110101011010000000000001000100000;
          56: out = b11011110101011010000000000001111100000;
            state.d = state.SHR;
          default: out = b00000000000000000000000000000000000000;
        }
      state.SHR:
        case (in) {
          57: out = b11011110101011010000000000000101100001;
          58: out = b11011110101011010000000000001000100001;
          59: out = b11011110101011010000000000001111100001;
            state.d = state.SRA;
          default: out = b00000000000000000000000000000000000000;
        }
      state.SRA:
        case (in) {
          60: out = b11011110101011010000000000000101100010;
          61: out = b11011110101011010000000000001000100010;
          62: out = b11011110101011010000000000001111100010;
          63: out = b01111100101010110000000000000101100010;
          64: out = b01111100101010110000000000001000100010;
          65: out = b01111100101010110000000000001111100010;
            state.d = state.RTL;
          default: out = b00000000000000000000000000000000000000;
        }
      state.RTL:
        case (in) {
          66: out = b11011110101011010000000000000101100011;
          67: out = b11011110101011010000000000001000100011;
          68: out = b11011110101011010000000000001111100011;
            state.d = state.RTR;
          default: out = b00000000000000000000000000000000000000;
        }
      state.RTR:
        case (in) {
          69: out = b11011110101011010000000000000101100100;
          70: out = b11011110101011010000000000001000100100;
          71: out = b11011110101011010000000000001111100100;
            state.d = state.CMPEQ;
          default: out = b00000000000000000000000000000000000000;
        }
      state.CMPEQ:
        case (in) {
          72: out = b10000000000000001111111111111111110011;
          73: out = b10000000000000000000000000000000110011;
          74: out = b10000000000000000111111111111111110011;
          75: out = b00000000000000000111111111111111110011;
          76: out = b00000000000000010111111111111111110011;
          77: out = b10000000000000001000000000000000110011;
          78: out = b00000000000000000000000000000000110011;
          79: out = b01111111111111110111111111111111110011;
          80: out = b11111111111111111000000000000000110011;
          81: out = b00000000000000001000000000000000110011;
          82: out = b01111111111111111000000000000000110011;
          83: out = b01111111111111110000000000000000110011;
          84: out = b01111111111111110000000000000001110011;
            state.d = state.CMPLT;
          default: out = b00000000000000000000000000000000000000;
        }
      state.CMPLT:
        case (in) {
          85: out = b10000000000000001111111111111111110101;
          86: out = b10000000000000000000000000000000110101;
          87: out = b10000000000000000111111111111111110101;
          88: out = b00000000000000000111111111111111110101;
          89: out = b00000000000000010111111111111111110101;
          90: out = b10000000000000001000000000000000110101;
          91: out = b00000000000000000000000000000000110101;
          92: out = b01111111111111110111111111111111110101;
          93: out = b11111111111111111000000000000000110101;
          94: out = b00000000000000001000000000000000110101;
          95: out = b01111111111111111000000000000000110101;
          96: out = b01111111111111110000000000000000110101;
          97: out = b01111111111111110000000000000001110101;
            state.d = state.CMPLE;
          default: out = b00000000000000000000000000000000000000;
        }
      state.CMPLE:
        case (in) {
          98: out = b10000000000000001111111111111111110111;
          99: out = b10000000000000000000000000000000110111;
          100: out = b10000000000000000111111111111111110111;
          101: out = b00000000000000000111111111111111110111;
          102: out = b00000000000000010111111111111111110111;
          103: out = b10000000000000001000000000000000110111;
          104: out = b00000000000000000000000000000000110111;
          105: out = b01111111111111110111111111111111110111;
          106: out = b11111111111111111000000000000000110111;
          107: out = b00000000000000001000000000000000110111;
          108: out = b01111111111111111000000000000000110111;
          109: out = b01111111111111110000000000000000110111;
          110: out = b01111111111111110000000000000001110111;
            state.d = state.ADD;
          default: out = b00000000000000000000000000000000000000;
        }
      default: out = b00000000000000000000000000000000000000;
        
    }
  }
}
