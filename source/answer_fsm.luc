module answer_fsm #(STATES = 110 : STATES > 0)( 
    input clk,
    input rst,
    input in[STATES],
    output out[38]
  ) {
  
.clk(clk) {
    .rst(rst) {
      fsm state = {ADD, SUB, MULT, XOR, AND, PASSTHROUGH, OR, SHL, SHR, SRA, RTL, RTR, CMPEQ, CMPLT, CMPLE};
    }
  }
  
  always {
    case (state.q) {
      state.ADD:
        case (in) {
          1: out = c{16h0, 16h0, 6b0};
          2: out = c{h7FFF, 16h0, 6b0};
          3: out = c{16h0, h7FFF, 6b0};
          4: out = c{hFFFF, 16h0, 6b0};
          5: out = c{16h0, hFFFF, 6b0};
          6: out = c{h1234, h3456, 6b0};
          7: out = c{hF801, hF820, 6b0};
          8: out = c{hDE00, h00AD, 6b0};
          9: out = c{h00EF, hBE00, 6b0};
          10: out = c{hFFFF, hFFFF, 6b0};
          11: out = c{h7000, h7000, 6b0};
          12: out = c{hFFFF, h0001, 6b0};
            state.d = state.SUB;
          default: out = c{h0000, h0000, b000000};
        }
      state.SUB:
        case (in) {
          13: out = c{16h0, 16h0, b000001};
          14: out = c{h7FFF, 16h0, b000001};
          15: out = c{16h0, h7FFF, b000001};
          16: out = c{hFFFF, 16h0, b000001};
          17: out = c{16h0, h7FFF, b000001};
          18: out = c{h7654, h5432, b000001};
          19: out = c{h5432, h7654, b000001};
          20: out = c{hEDCB, hDCBA, b000001};
          21: out = c{hDCBA, hEDCB, b000001};
          22: out = c{h7FFF, h8000, b000001};
          23: out = c{h8000, h7FFF, b000001};
            state.d = state.MULT;
          default: out = c{h0000, h0000, b000000};
        }
      state.MULT:
        case (in) {
          24: out = c{16h0, 16h0, b000100};
          25: out = c{16h0, h7FFF, b000100};
          26: out = c{16h0, hFFFF, b000100};
          27: out = c{h7FFF, 16h0, b000100};
          28: out = c{hFFFF, 16h0, b000100};
          29: out = c{h0005, h0003, b000100};
          30: out = c{h0005, hFFFF, b000100};
          31: out = c{hFFFE, h0004, b000100};
          32: out = c{hFFFE, hFFFD, b000100};
          33: out = c{h7FFF, h7000, b000100};
          34: out = c{h8000, h8FFF, b000100};
            state.d = state.XOR;
          default: out = c{h0000, h0000, b000000};
        }
      state.XOR:
        case (in) {
          35: out = c{h0000, h0000, 6d16};
          36: out = c{hFFFF, hFFFF, 6d16};
          37: out = c{hFFFF, h0000, 6d16};
          38: out = c{h5555, hAAAA, 6d16};
          39: out = c{hFFFF, h5555, 6d16};
            state.d = state.AND;
          default: out = c{h0000, h0000, b000000};
        }
      state.AND:
        case (in) {
          40: out = c{h0000, h0000, 6d17};
          41: out = c{hFFFF, hFFFF, 6d17};
          42: out = c{hFFFF, h0000, 6d17};
          43: out = c{h5555, hAAAA, 6d17};
          44: out = c{hDEAD, h00FF, 6d17};
            state.d = state.PASSTHROUGH;
          default: out = c{h0000, h0000, b000000};
        }
      state.PASSTHROUGH:
        case (in) {
          45: out = c{h0000, h0000, 6d18};
          46: out = c{hFFFF, h0000, 6d18};
          47: out = c{hBEEF, h0000, 6d18};
          48: out = c{h1234, hABCD, 6d18};
            state.d = state.OR;
          default: out = c{h0000, h0000, b000000};
        }
      state.OR:
        case (in) {
          49: out = c{h0000, h0000, 6d19};
          50: out = c{hFFFF, hFFFF, 6d19};
          51: out = c{hFFFF, h0000, 6d19};
          52: out = c{h5555, hAAAA, 6d19};
          53: out = c{hDE00, h00AD, 6d19};
            state.d = state.SHL;
          default: out = c{h0000, h0000, b000000};
        }
      state.SHL:
        case (in) {
          54: out = c{hDEAD, 16d5, 6d32};
          55: out = c{hDEAD, 16d8, 6d32};
          56: out = c{hDEAD, 16d15, 6d32};
            state.d = state.SHR;
          default: out = c{h0000, h0000, b000000};
        }
      state.SHR:
        case (in) {
          57: out = c{hDEAD, 16d5, 6d33};
          58: out = c{hDEAD, 16d8, 6d33};
          59: out = c{hDEAD, 16d15, 6d33};
            state.d = state.SRA;
          default: out = c{h0000, h0000, b000000};
        }
      state.SRA:
        case (in) {
          60: out = c{hDEAD, 16d5, 6d34};
          61: out = c{hDEAD, 16d8, 6d34};
          62: out = c{hDEAD, 16d15, 6d34};
          63: out = c{h7CAB, 16d5, 6d34};
          64: out = c{h7CAB, 16d8, 6d34};
          65: out = c{h7CAB, 16d15, 6d34};
            state.d = state.RTL;
          default: out = c{h0000, h0000, b000000};
        }
      state.RTL:
        case (in) {
          66: out = c{hDEAD, 16d5, 6d35};
          67: out = c{hDEAD, 16d8, 6d35};
          68: out = c{hDEAD, 16d15, 6d35};
            state.d = state.RTR;
          default: out = c{h0000, h0000, b000000};
        }
      state.RTR:
        case (in) {
          69: out = c{hDEAD, 16d5, 6d36};
          70: out = c{hDEAD, 16d8, 6d36};
          71: out = c{hDEAD, 16d15, 6d36};
            state.d = state.CMPEQ;
          default: out = c{h0000, h0000, b000000};
        }
      state.CMPEQ:
        case (in) {
          72: out = c{h8000, hFFFF, 6d51};
          73: out = c{h8000, h0000, 6d51};
          74: out = c{h8000, h7FFF, 6d51};
          75: out = c{h0000, h7FFF, 6d51};
          76: out = c{h0001, h7FFF, 6d51};
          77: out = c{h8000, h8000, 6d51};
          78: out = c{h0000, h0000, 6d51};
          79: out = c{h7FFF, h7FFF, 6d51};
          80: out = c{hFFFF, h8000, 6d51};
          81: out = c{h0000, h8000, 6d51};
          82: out = c{h7FFF, h8000, 6d51};
          83: out = c{h7FFF, h0000, 6d51};
          84: out = c{h7FFF, h0001, 6d51};
            state.d = state.CMPLT;
          default: out = c{h0000, h0000, b000000};
        }
      state.CMPLT:
        case (in) {
          85: out = c{h8000, hFFFF, 6d53};
          86: out = c{h8000, h0000, 6d53};
          87: out = c{h8000, h7FFF, 6d53};
          88: out = c{h0000, h7FFF, 6d53};
          89: out = c{h0001, h7FFF, 6d53};
          90: out = c{h8000, h8000, 6d53};
          91: out = c{h0000, h0000, 6d53};
          92: out = c{h7FFF, h7FFF, 6d53};
          93: out = c{hFFFF, h8000, 6d53};
          94: out = c{h0000, h8000, 6d53};
          95: out = c{h7FFF, h8000, 6d53};
          96: out = c{h7FFF, h0000, 6d53};
          97: out = c{h7FFF, h0001, 6d53};
            state.d = state.CMPLE;
          default: out = c{h0000, h0000, b000000};
        }
      state.CMPLE:
        case (in) {
          98: out = c{h8000, hFFFF, 6d55};
          99: out = c{h8000, h0000, 6d55};
          100: out = c{h8000, h7FFF, 6d55};
          101: out = c{h0000, h7FFF, 6d55};
          102: out = c{h0001, h7FFF, 6d55};
          103: out = c{h8000, h8000, 6d55};
          104: out = c{h0000, h0000, 6d55};
          105: out = c{h7FFF, h7FFF, 6d55};
          106: out = c{hFFFF, h8000, 6d55};
          107: out = c{h0000, h8000, 6d55};
          108: out = c{h7FFF, h8000, 6d55};
          109: out = c{h7FFF, h0000, 6d55};
          110: out = c{h7FFF, h0001, 6d55};
            state.d = state.ADD;
          default: out = c{h0000, h0000, b000000};
        }
      default: out = c{h0000, h0000, b000000};
        
    }
  }
}
