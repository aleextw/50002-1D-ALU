/*
   Bitshift: This module takes a binary number a and performs a bitshift operation
   on it specified by the last 3 bits of ALUFN. The amount to shift depends on the
   last 4 bits of the binary number b.
*/
module bitshift (
    input a[16],
    input b[16],
    input alufn[3],
    output out[16]
  ) {
  
  always {
    case(alufn) {
      // 100000 SHL
      0: out = a << b[3:0];  
      // 100001 SHR
      1: out = a >> b[3:0];
      // 100010 SRA (Signed right shift not working for some reason)
      2: out = a >>> b[3:0] ^ (16x{a[15]} << (16 - b[3:0]));
      // 100011 RTL rotate left
      3: out = (a >> (16 - b[3:0])) | (a << b[3:0]);
      // 100100 RTR rotate right
      4: out = (a << (16 - b[3:0])) | (a >> b[3:0]);
      default: out = a;
    }
  }
}
