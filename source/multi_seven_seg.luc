/*
   Multi-Seven-Segment: This module takes an input n-dimension array 'values' 
   containing values 0-9 corresponding to each position in n, and outputs an n-bit
   value 'sel' selecting one of the n seven-segment displays, along with a 7-bit 
   output 'seg' specifying which segments of the seven-segment display to light up,
   to display the value specified by the corresponding position in 'values'.
   
   #DIGITS specifies how many seven-segment displays we are trying to output to, and
   #DIV specifies the amount to divide the clock signal by when incrementing our counter.
   Too slow, and the display starts to flicker.
   
   Since we can only address the seven-segment displays on the IO Board one at a time,
   we basically just cycle through each sel value and its seg output very fast, to give
   the illusion that we are setting all.
*/

module multi_seven_seg #(
    DIGITS = 4 : DIGITS > 0,
    DIV = 16 : DIV >= 0
  )(
    input clk,                // clock
    input rst,                // reset
    input values [DIGITS][4], // values to show
    output seg [7],           // LED segments
    output sel [DIGITS]       // Digit select
  ) {
  
  // number of bits required to store DIGITS-1
  const DIGIT_BITS = $clog2(DIGITS);
  
  .clk(clk), .rst(rst) {
    // #TOP specifies the max value of the counter, after which it resets to 0.
    // #SIZE specifies the output size of the counter.
    counter ctr (#DIV(DIV), #SIZE(DIGIT_BITS), #TOP(DIGITS-1)); 
  }
  
  // The segment decoder takes the binary representation of our desired decimal value,
  // and outputs the required segments needed to be illuminated.
  seven_seg seg_dec;                      
  
  // The digit decoder is used to specify which of the seven-segment displays is selected
  // using one-hot encoding.
  // e.g., if we want to select the third from the left, our output sel = {0, 0, 1, 0}
  decoder digit_dec (#WIDTH(DIGIT_BITS)); 
  
  always {
    seg_dec.char = values[ctr.value];     // select the value for the active digit
    seg = seg_dec.segs;                   // output the decoded value
    
    digit_dec.in = ctr.value;             // decode active digit to one-hot
    sel = digit_dec.out;                  // output the active digit
  }
}